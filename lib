#!/usr/bin/env bash
# shellcheck disable=SC2034

# Return 0 or 1 depending a command exists or not
check_cmd() {
    if [ ! "$(command -v "$1")" ]; then
        echo "Please install $1" >&2
        exit 1
    fi
}

os_find_cmd() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        echo "find"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac OSX
        echo "gfind"
    fi
}

check_find() {
    find_cmd=$1
    # requires GNU sed
    # find the find/gfind realpath
    find_path=$(which "$find_cmd")
    # echo "$find_path"
    output=$($find_path --version)
    out=$($output "findutils")
    echo "$out"
    exit
    out=$(grep "$output" "findutils")

    if [[ -z "$out" ]]; then
        echo "Please install GNU find. If you are macOS user, run brew install findutils" >&2
        exit 1
    fi
}

# return the number of slashes
# Use: slashes /path/name
slashes() {
    echo "$1" | grep -o "/" | wc -l | tr -d '[:space:]'
}

# Find repo name and script name from
# shinokada/gitstart
# raylee/tldr-sh-client tldr
# https://github.com/raylee/tldr-sh-client.git tldr
# https://github.com/raylee/tldr-sh-client tldr
repo_script() {
    local link_arg script_arg
    link_arg=$1
    script_arg=$2
    link_slash_num=$(slashes "$link_arg")
    script_slash_num=$(slashes "$script_arg")
    # link_slash_num=$(echo "$link_arg" | grep -o "/" | wc -l)
    if [[ $link_arg =~ "@" ]]; then
        # if link_arg has @ it is like git@github.com:shinokada/cleanit.git
        echo "Please use URL or https, not ssh." >&2
        exit 1
    fi
    if [[ -z $script_arg ]]; then
        # -z string is zero
        # check if it has a / if not exit
        if ((link_slash_num < 1)); then
            echo "Not valid parameter." >&2
            exit 1
        fi
        # no $2 so it must be the form of
        # shinokada/gitstart has the same repo_name and script_name
        # or https://github.com/shinokada/cleanit
        # or https://github.com/shinokada/cleanit.git
        git_user=$(basename "${link_arg%/*}")
        repo_name=$(basename "${link_arg##*/}" .git)
        # repo_name="${link_arg##*/}"
        script_name=$(basename "${link_arg##*/}" .git)
        # script_name="${link_arg##*/}"
        if [[ $link_arg =~ https://github.com/ ]]; then
            repo_link="$link_arg"
        else
            repo_link="https://github.com/${link_arg}"
        fi
    else
        # there is $2
        # if $2 has one slash
        if (("$script_slash_num" == 1)); then
            git_user="${link_arg%/*}"
            repo_name="${link_arg##*/}"
            script_repo="${script_arg%/*}"
            script_name="${script_arg##*/}"
            repo_link="https://github.com/${link_arg}"
        else
            if (("$link_slash_num" == 1)); then
                # one / so it must be raylee/tldr-sh-client tldr
                git_user="${link_arg%/*}"
                repo_name="${link_arg##*/}"
                script_name="$script_arg"
                repo_link="https://github.com/${link_arg}"
            else
                # it must be https://github.com/raylee/tldr-sh-client.git tldr
                git_user=$(basename "${link_arg%/*}")
                repo_name=$(basename "$link_arg" .git)
                script_name="$script_arg"
                repo_link="$link_arg"
            fi
        fi

    fi
}

# Create a awesome dir if it doesn't, exit 1.
checkOrmkdir() {
    if [[ -z $1 ]]; then
        echo "Specify the directory." >&2
        exit 1
    fi
    if [[ ! -d $1 ]]; then
        mkdir "$1"
        echo "$1 directory is created." >&1
        return 0
    else
        return 0
    fi
}

# Return 0 or 1 depending a dir exists or not
# Use: checkDir /path/to/dir
checkDir() {
    if [[ $1 = "$HOME" || $1 = "$HOME/awesome" ]]; then
        # return 0 because there is a dir
        return 1
    elif [[ -d $1 ]]; then
        return 0
    else
        # return 1 because there is no dir
        return 1
    fi
}

# Return 0 or 1 depending a file exists or not
# Use: checkDir /path/to/file
checkFile() {
    if [[ -f $1 ]]; then
        # return 0 because there is a file
        return 0
    else
        # return 1 because there is no file
        return 1
    fi
}

no_dir() {
    if [[ -d $1 ]]; then
        # return 1 because there is a dir
        return 1
    else
        # return 0 because no dir
        return 0
    fi
}

# Option list lists all symlinks from bin dir
symlink_names() {
    # ls "$awesome_dir"
    find "$1" -type l -exec basename -a {} +
    # find "$1" -type l
}

# Checks a symlink in a bin dir
# Use: no_symlink "my-link" "$bin_dir"
no_symlink() {
    if [[ -L "$2/$1" ]]; then
        # return 1 because there is a symlink
        return 1
    else
        # return 0 because there is no symlink
        return 0
    fi
}

# retuns the number of symlink(s) that uses the same dir in ~/bin
# num_symlinks() {
#     repo=$1
#     bin_dir=$2
#     # find Bash-Snippets after awesome/ from /Users/shinichiokada/awesome/Bash-Snippets/movies
#     # ls -al "$HOME"/bin | grep -o "*${dir}*" | wc -l
#     # count=0
#     # for f in {1..7}; do
#     # for f in ${bin_dir}; do
#     ((count++))
#     # if [[ f =~ ${repo} ]]; then
#     #     echo f
#     #     $count++
#     # fi
#     # done
#     find "$bin_dir" -regex
#     echo "$count"
# }

# Outputs the path to the src (directory path)
src_path() {
    src_path=$1
    echo "${src_path%/*}"
}

repo_after() {
    link=$2
    wa=$1
    dirfile=${link#*$wa/}
    echo "$dirfile" | cut -d/ -f1
}

first() {
    item=$1
    echo "${item%/*}"
}

second() {
    item=$1
    echo "${item##*/}"
}

# ###### No test yet

check_branch() {
    branch=$(git branch -r | grep master)
    echo "${branch##*/}"
}

# check if $1 is in the alias_names or symlink_names
alias_check() {
    if type "$1"; then
        # echo "You already have that command." >&2
        return 1
    else
        # echo "Good. Because there is no similar command"
        return 0
    fi
}

# "${awesome_dir}" "${repo_name}" "${script_name}" "${bin_dir}"
# Create a symlink in bin. repo_name and file_name can be different
create_symlink() {
    # add a symlink
    ln -sf "$1/$2/$3" "$4/$3"
    echo "Created a symlink."
    return 0
}

# "${awesome_dir}" "${repo_name}" "${script_name}" "${bin_dir}" "alias_name"
create_alias() {
    # add a symlink
    ln -sf "$1/$2/$3" "$4/$5"
    echo "Created a symlink."
    return 0
}

same_src_path() {
    src_path=$1
    bin_dir=$2
    find "$bin_dir" -type l -ilname "*${src_path}*" | wc -l
}
