#!/usr/bin/env bash
# shellcheck disable=SC2154

# ##### set up ########
version="0.3.2"
awesome_dir="$HOME/awesome"
bin_dir="$HOME/bin"

if [[ -z $(which awesome) ]]; then
    # echo "in 1"
    script_path=$(realpath "$0")
    # script_path=${script_path%/*}
else
    # echo "in 2"
    script_path=$(realpath "$(which awesome)")
fi

script_dir="${script_path%/*}"

source "$script_dir/lib"

# set find command find/gfind
find_cmd=$(os_find_cmd)
# echo "$find_cmd"
check_find "$find_cmd"

########################

# Return Y or N after asking a question.
fn_confirmRemove() {
    local package=$1
    read -rp "Do you want to remove $package? yes/y or no/n   " PANS

    ans=$(echo "$PANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")

    echo "$ans"
}

# Outputs the main script name. if $2 is provided use it as script_name otherwise use $1 as script_name
fn_search_main() {
    repo=$1
    if [[ -d "$awesome_dir/$repo" ]]; then
        echo "found it"
        cd "$awesome_dir/$repo" || return
        if [[ -n $2 ]]; then
            script_name=$2
        else
            script_name="$repo"
        fi
        IFS= read -r -d '' repo < <(find . '(' -name "${script_name##*/}" -o -name "${script_name##*/}.sh" ')' -print0)

        if [[ $repo ]]; then
            printf '%s\n' "$(basename "$repo")"
        else
            return 1
        fi
    else
        echo "The repo and script names are different. For example, tldr-sh-client/tldr." >&2
        echo "Use, for example:" >&2
        echo "awesome link tldr-sh-client tldr" >&2
        exit 1
    fi
}

# Run rm after a confirmation
fn_remove_dir() {
    repo=$1
    src_path=$2
    # exit if the src_path is $HOME/awesome
    if [[ $src_path == "$HOME/awesome" || $src_path == "$HOME/bin" || $src_path == "$HOME" ]]; then
        echo "We don't remove $HOME, $HOME/awesome nor $HOME/bin directory."
        echo "Remove the repo manually."
        return
    fi
    # confirm
    if [[ $(fn_confirmRemove "$src_path") = "Y" ]]; then
        echo "Removing the ${src_path} directory ..."
        rm -rf "${src_path}" || exit
        echo "$repo directory removed."
    fi
    return 0
}

# Run rm a symlink
fn_remove_symlink() {
    if [[ -z $1 ]]; then
        echo "Specify the repo to remove." >&2
        exit 1
    fi
    repo=$1
    # src_path=$2

    # check if the dir exist || exit
    if [[ $(fn_confirmRemove symlink) = "Y" ]]; then
        echo "Removing the symlink ..."
        cd "$bin_dir" || exit
        rm "${repo}" 2>/dev/null || exit
        echo "Symlink removed."
    fi
    exit
}

# Add a symlink
fn_add_symlink() {
    if [[ -z $1 ]]; then
        echo "Specify the repo to remove." >&2
        exit 1
    else
        repo_base=$1
    fi
    # repo_base=$(basename "$url" .git)
    if [[ -n $2 ]]; then
        script_name=$2
    else
        script_name="$repo_base"
    fi
    # check if repo_name exists in awesome dir
    echo "Searching ..."
    # echo "repo-base $repo_base"
    # echo "script-name: $script_name"
    if [[ $(ls "$awesome_dir") =~ $script_name ]]; then
        # exit
        file_name=$(fn_search_main "$repo_base" "$script_name") || exit 1
        echo "$file_name"
        # if not exit with warning
        # show awesome dir
        # link repo_name/script_name
        create_symlink "${awesome_dir}" "${repo_base}" "${script_name}" "${bin_dir}" || exit
        echo "Symlink added."
    else
        echo "No $script_name in $awesome_dir" >&2
        exit 1

    fi
    # echo "$script_name"

    exit
}

# fn_install run git clone and create a symlink
fn_install() {
    if [[ -z $1 ]]; then
        echo "You need to specify the GitHub repo URL." >&2
        exit 1
    fi

    # $2 may have subdir/main-script
    slash_num=$(slashes "$2")
    if [[ $slash_num = 0 ]]; then
        # it can be raylee/tldr-sh-client tldr or
        # no $2 like shinokada/gitig

        # repo_script sets $git_user, $repo_name, $script_name, and $repo_link
        # e.g. repo_script raylee/tldr-sh-client tldr
        # e.g. repo_script shinokada/gitig
        # returns repo_link
        repo_script "$1" "$2"
        cd "$awesome_dir" || exit
        echo "Cloning ..."
        git clone "${repo_link}" || exit
        echo "Cloning done."
        echo "${awesome_dir}, ${repo_name}, ${script_name}, ${bin_dir}"
        create_symlink "${awesome_dir}" "${repo_name}" "${script_name}" "${bin_dir}" || exit
    elif [[ $slash_num = 1 ]]; then
        # $1 alexanderepstein/Bash-Snippets
        # $2 cheat/cheat
        # echo "You have 1 /."
        cd "$awesome_dir" || exit
        user_repo=$1
        user=$(first "$user_repo")
        repo=$(second "$user_repo")
        sub=$2
        subrepo=$(first "$sub")
        subscript=$(second "$sub")
        # if $? = 0 is good, no link
        if ! no_symlink "$subscript" "$bin_dir"; then
            echo "Link exist. Exitting..." >&2
            exit 1
        fi
        # check if subrepo and subscript exist
        # use may use wrong names
        echo "${awesome_dir}/${repo}/${subrepo}"
        if checkDir "${awesome_dir}/${repo}/${subrepo}"; then
            :
        else
            echo "There is no repo called ${subrepo}." >&2
            exit 1
        fi
        if checkFile "${awesome_dir}/${repo}/${subrepo}/${subscript}"; then
            :
        else
            echo "There is no script called ${subscript}." >&2
            exit 1
        fi
        # 1. check if there is the root repo
        # repo_script returns git_usr, repo_name, script_repo, script_name
        repo_script "$1"
        # echo "${awesome_dir}, ${repo_name}, ${script_repo},${script_name}, ${bin_dir}"
        # checkDir $repo_name
        if checkDir "${awesome_dir}/${repo}"; then
            :
            # no clone
        else
            # clone
            git clone "$repo_link"
            echo "Cloning done."
        fi
        # create a symlink
        create_symlink "${awesome_dir}" "${repo}/${subrepo}" "${subscript}" "${bin_dir}" || exit
    else
        echo "You can't install sub/sub/script."
    fi
    echo "${repo_name}/${script_name} installation completed." >&2
    echo "Try ${repo} -h or which ${repo}." >&2
}

# fn_uninstall removes a symlink and repo
fn_uninstall() {
    cd "$awesome_dir" || exit
    repo=$1
    ####### check if there is a (sym)link in ~/bin dir
    # find the realpath (source) ######
    path=$(realpath "$HOME/bin/$repo")
    # src_path outputs the directory path
    src_path=$(src_path "$path")
    # use realpath to find the real dir
    checkDir "$src_path" || exit 1
    echo "src path: $src_path"
    echo "repo: $repo"
    # 1. find the base_repo_name using realpath
    # find the word after awesome/
    # 2. if there is no other symlink is using the dir
    if [[ $(num_symlinks "$repo" "$bin_dir") = 1 ]]; then
        # remove a dir
        echo "only 1 symlink"
        # fn_remove_dir "$repo" "$src_path"
    else
        # don't remove the dir
        echo "not 1"
        num_symlinks "$repo" "$bin_dir"
        :
    fi
    exit
    # remove a symlink
    fn_remove_symlink "$repo"
    exit
}

####### fn_update takes a script name (like tldr, not a repo name tldr-sh-client) and run git pull ######
fn_update() {
    repo=$1
    ####### find the real repo name by checking the ~/bin directory using realpath ######
    if [[ $(ls "$bin_dir") =~ $repo ]]; then
        # script=$1
        cd "$awesome_dir/${1}" || exit
        git pull || exit
        echo "$repo updated."
        exit
    else
        echo "You don't have ${repo}." >&2
        exit 2
    fi
}

fn_add_alias() {
    local alias_name repo_name script_name
    alias_name=$1
    repo_name=$2
    script_name=$3

    echo "Creating an alias $alias_name to $repo_name/$script_name"
    # check_cmd "$alias_name"
    alias_name "$alias_name"
    # all good create an alias
    create_alias "${awesome_dir}" "${repo_name}" "${script_name}" "${bin_dir}" "${alias_name}" || exit
    echo "Alias $alias_name created."
}

fn_help() {
    cat <<EOF
Description: Awesome install a package from a GitHub repo on your macOS/Linux.

Usage: awesome [-h] [command]
    -i | install installs a package from a GitHub repo and create a symlink in ~/bin
    rm           uninstalls a package and remove a symlink
    ls | list    lists awesome packages
    link         adds a symlink
    unlink       remove a package symlink 
    -u | update  checks an update and install a new package
    -a | alias   creates an alias 
    -v | --version shows the version
    -h, --help   shows this help message and exit"

Examples:
    Install a package
    awesome -i shinokada/gitstart
    awesome -i shinokada/gitstart.git
    awesome -i raylee/tldr-sh-client tldr
    awesome -i https://github.com/raylee/tldr-sh-client tldr
    awesome install https://github.com/shinokada/gitstart.git

    Uninstall a package
    awesome rm gitstart

    Update a package
    awesome -u gitstart
    awesome update gitstart

    Show installed packages
    awesome ls
    awesome list

    Create an alias to a script
    awesome -a ne script-example node-example.js

    Remove a symlink
    awesome unlink gitstart

    Create a symlink
    awesome link gitstart

    Show this help
    awesome -h

    Show the version
    awesome -v
EOF
    exit
}

fn_main() {
    if (($# > 0)); then
        case $1 in
        -i | install) fn_install "$2" "$3" ;;
        rm) fn_uninstall "$2" ;;
        ls | list)
            symlink_names "$bin_dir"
            exit
            ;;
        link) fn_add_symlink "$2" "$3" ;;
        unlink) fn_remove_symlink "$2" ;;
        -u | update) fn_update "$2" ;;
        -a | alias) fn_add_alias "$2" "$3" "$4" ;;
        -h | --help) fn_help ;;
        -v | --version) echo "${version}" ;;
        *) fn_help ;;
        esac
    else
        fn_help
        exit
    fi
}

checkOrmkdir "$awesome_dir"
checkOrmkdir "$bin_dir"
check_cmd git
fn_main "$@"
